// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	engine "github.com/islombektoshev/RocksQL/engine"
	mock "github.com/stretchr/testify/mock"

	resp "github.com/islombektoshev/RocksQL/resp"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

type Handler_Expecter struct {
	mock *mock.Mock
}

func (_m *Handler) EXPECT() *Handler_Expecter {
	return &Handler_Expecter{mock: &_m.Mock}
}

// ExecuteCmd provides a mock function with given fields: ctx, cmds
func (_m *Handler) ExecuteCmd(ctx engine.SessionContext, cmds []string) resp.RESPValue {
	ret := _m.Called(ctx, cmds)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCmd")
	}

	var r0 resp.RESPValue
	if rf, ok := ret.Get(0).(func(engine.SessionContext, []string) resp.RESPValue); ok {
		r0 = rf(ctx, cmds)
	} else {
		r0 = ret.Get(0).(resp.RESPValue)
	}

	return r0
}

// Handler_ExecuteCmd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteCmd'
type Handler_ExecuteCmd_Call struct {
	*mock.Call
}

// ExecuteCmd is a helper method to define mock.On call
//   - ctx engine.SessionContext
//   - cmds []string
func (_e *Handler_Expecter) ExecuteCmd(ctx interface{}, cmds interface{}) *Handler_ExecuteCmd_Call {
	return &Handler_ExecuteCmd_Call{Call: _e.mock.On("ExecuteCmd", ctx, cmds)}
}

func (_c *Handler_ExecuteCmd_Call) Run(run func(ctx engine.SessionContext, cmds []string)) *Handler_ExecuteCmd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(engine.SessionContext), args[1].([]string))
	})
	return _c
}

func (_c *Handler_ExecuteCmd_Call) Return(_a0 resp.RESPValue) *Handler_ExecuteCmd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Handler_ExecuteCmd_Call) RunAndReturn(run func(engine.SessionContext, []string) resp.RESPValue) *Handler_ExecuteCmd_Call {
	_c.Call.Return(run)
	return _c
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
